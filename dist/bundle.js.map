{"version":3,"sources":["webpack:///webpack/bootstrap b336d75a838f830ec445","webpack:///./src/index.js","webpack:///./src/squigglies.js","webpack:///./src/utils.js","webpack:///./src/snowflake.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;AC7DA;AACA;AAKC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA,OAAO,KAAK;;AAEZ;;AAEA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;;;;;;;;AC1H0B;;AAE1B;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,qE;;;;;;;AC9CA;AACA,iBAAiB,IAAI,GAAG,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA,4C;AACA;;AAEA;AACA,oCAAoC,eAAe;AACnD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;ACjDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,K;;;AAGA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b336d75a838f830ec445","import Squigglies from './squigglies';\nimport createSnowFlake from './snowflake';\nimport {\n  getAspectHeight,\n  onResize,\n  onDocumentLoad\n} from './utils';\n\nconst angleInRadians = angle => angle * (Math.PI / 180);\nconst angleInDegrees = radian => radian * (180 / Math.PI);\n\n// Flex container\nconst content = document.getElementById('content');\n// Background\nconst bg = document.getElementById('background');\n// Canvas\nconst canvas = document.createElement('canvas');\ncanvas.id = 'canvas';\nbg.appendChild(canvas);\n\nconst adjustDimensions = (multiplier) => {\n  bg.width = document.body.scrollWidth * 1;\n  bg.height = getAspectHeight(bg.width);\n  canvas.width = bg.width;\n  canvas.height = bg.height;\n}\nonResize(adjustDimensions)\nonDocumentLoad(() => {\n  adjustDimensions()\n  foreground();\n  background();\n});\n\nconst ctx = canvas.getContext('2d');\n\n//canvas.width = document.body.scrollWidth;\n//canvas.height = document.body.scrollHeight;\n\nconst {Draw} = Squigglies(ctx);\n\nctx.strokeStyle = 'black';\n\nconst background = () => {\n  const snowFlakeCount = 50;\n  for (let s = 0; s < snowFlakeCount; s++) {\n    createSnowFlake(ctx, Draw, {\n      ttl: function () {\n        return this.getStaticRandom(200, 480)\n      },\n      startX: function () {\n        return Math.random() * canvas.width\n      },\n      startY: function () {\n        return this.getStaticRandom(0, (canvas.height - canvas.height / 5))\n      },\n      travelX: function () {\n        return (this.oX\n          + (this.cycle\n            + Math.cos(angleInRadians(this.cycle * this.getStaticRandom(1, 4)))\n            * this.getStaticRandom(8, 9)\n          )\n          * this.getStaticRandom(-0.5, 1, 5)\n        )\n      },\n      travelY: function () {\n        return (this.oY\n          - (this.cycle\n            + Math.cos(angleInRadians(this.cycle * this.getStaticRandom(1, 5)))\n            * this.getStaticRandom(1, 5)\n          )\n        )\n      }\n    });\n  }\n};\n\n//foreground:  normal, slowly falling, fairly large flakes\nconst foreground = () => {\n  const snowFlakeCount = 100;\n  for (var s = 0; s < snowFlakeCount; s++) {\n    createSnowFlake(ctx, Draw, {\n      ttl: function () {\n        return this.getStaticRandom(200, 320)\n      },\n      startX: function () {\n        return Math.random() * canvas.width\n      },\n      startY: function () {\n        return this.getStaticRandom(-(canvas.height / 4), (canvas.height - canvas.height / 5))\n      },\n      travelX: function () {\n        return (this.oX\n          + (this.cycle\n            + Math.cos(angleInRadians(this.cycle * this.getStaticRandom(1, 4)))\n            * this.getStaticRandom(8, 9)\n          )\n          * this.getStaticRandom(-0.5, 1, 5)\n        )\n      },\n      travelY: function () {\n        return (this.oY\n          + (this.cycle\n            + Math.cos(angleInRadians(this.cycle * this.getStaticRandom(1, 5)))\n            * this.getStaticRandom(1, 5)\n          )\n        )\n      }\n    });\n  }\n}\n\n\n// */\n/*\nconst f = new Draw(150, 70);\nf.update = function update() {\n  ctx.clearRect(this.x, this.y, 5, 5);\n  this.x += 2;\n  this.y += 2;\n  ctx.fillRect(this.x, this.y, 5, 5);\n};\nf.render();\n// */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 0\n// module chunks = 0","import { getStaticRandom } from './utils';\n\nconst fps = 60;\nconst interval = 1000 / fps;\n\nfunction Squigglies(ctx) {\n\n  // Collect all renderable instances here\n  const renderQueue = [];\n\n  // Draw all instances in one go\n  let now;\n  let then = Date.now();\n  let delta;\n  (function renderBuffer() {\n    requestAnimationFrame(renderBuffer);\n    now = Date.now();\n    delta = now - then;\n    if (delta > interval) {\n      then = now - (delta % interval);\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      renderQueue.map(instance => instance.update())\n    }\n  })();\n\n  return {\n    Draw: function () {\n      \n      this.reset = () => {\n        throw new Error('Reset function not provided');\n      }\n\n      this.getStaticRandom = getStaticRandom;\n\n      // Assign a custom frame update function\n      this.update = () => {\n        throw new Error('Update function not provided');\n      };\n\n      this.start = () => {\n        renderQueue.push(this);\n      };\n    },\n  };\n}\n\nexport default Squigglies;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/squigglies.js\n// module id = 1\n// module chunks = 0","export const getStaticRandom = function(min, max) {\n  const key = `${min}-${max}`;\n  if (!this.randomTable[key]) {\n    const range = max - min;\n    this.randomTable[key] = min+(Math.random()*range)\n  }\n  return this.randomTable[key];\n}\n\nexport const getAspectHeight = width => width*0.5625;\n\nexport const onResize = (callback) => {\n  window.addEventListener(\"resize\", resizeThrottler, false);\n  var resizeTimeout;\n  function resizeThrottler() {\n    // ignore resize events as long as an actualResizeHandler execution is in the queue\n    if ( !resizeTimeout ) {\n      resizeTimeout = setTimeout(function() {\n        resizeTimeout = null;\n        callback();\n       // The actualResizeHandler will execute at a rate of 15fps\n       }, 66);\n    }\n  }\n};\n\nexport const onDocumentLoad = (callback) => {\n  document.onreadystatechange = function () {\n    if (document.readyState === \"interactive\") {\n        callback();\n    }\n  }\n}\n\n\n// https://github.com/substack/point-in-polygon/\nexport const pointInPolygon = function(point, vs) {  \n  var x = point[0], y = point[1];\n  \n  var inside = false;\n  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n      var xi = vs[i][0], yi = vs[i][1];\n      var xj = vs[j][0], yj = vs[j][1];\n      \n      var intersect = ((yi > y) != (yj > y))\n          && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n      if (intersect) inside = !inside;\n  }\n  \n  return inside;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 2\n// module chunks = 0","\nfunction createSnowFlake(ctx, Draw, config) {\n  let d = new Draw();\n\n  d.reset = function reset() {\n    this.size = 3;\n    Object.assign(this, config);\n    this.randomTable = [];\n    this.oX = this.startX();\n    this.oY = this.startY();\n    this.x = this.oX;\n    this.y = this.oY;\n    this.cycle = 0;\n    this.opacity = 0;\n  };\n\n  d.reset();\n\n  d.update = function update() {\n    //console.log(this.cycle);\n    if (this.x > ctx.canvas.width || this.y > ctx.canvas.height) this.reset();\n    if (this.cycle >= this.ttl()) {\n      this.reset();\n    } else if (this.cycle > (this.ttl() - 100)) {\n      this.opacity -= 0.01\n    } else if (this.opacity < 1) {\n      this.opacity += 0.02\n    } \n    \n\n    this.x = this.travelX(this.cycle);\n    this.y = this.travelY(this.cycle);\n    this.cycle++;\n    ctx.save();\n    ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;\n    ctx.fillRect(this.x, this.y, this.size, this.size);\n    ctx.restore();\n  };\n  d.start();\n}\n\n\n\nexport default createSnowFlake;\n\n/*\n{\nstartX,\nstartY,\nstepX,\nstepY\n}\n*/\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/snowflake.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}